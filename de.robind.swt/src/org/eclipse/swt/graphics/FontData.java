package org.eclipse.swt.graphics;

import org.eclipse.swt.SWT;
import org.eclipse.swt.SWTException;
import org.eclipse.swt.SWTObject;

/**
 * Instances of this class describe operating system fonts.
 * <p>
 * For platform-independent behaviour, use the get and set methods corresponding
 * to the following properties:
 *
 * <ul>
 *  <li>height: the height of the font in points</li>
 *  <li>name: the face name of the font, which may include the foundry</li>
 *  <li>
 *    style: A bitwise combination of {@link SWT#NORMAL}, {@link SWT#ITALIC}
 *    and {@link SWT#BOLD}
 *  </li>
 * </ul>
 *
 * If extra, platform-dependent functionality is required:
 *
 * <ul>
 *  <li>
 *    On <i>Windows</i>, the data member of the {@link FontData} corresponds to
 *    a Windows <code>LOGFONT</code> structure whose fields may be retrieved
 *    and modified.
 *  </li>
 *  <li>
 *    On <i>X</i>, the fields of the {@link FontData} correspond to the entries
 *    in the font's <code>XLFD</code> name and may be retrieved and modified.
 *  </li>
 * </ul>
 *
 * Application code does <i>not</i> need to explicitly release the resources
 * managed by each instance when those instances are no longer required, and
 * thus no dispose() method is provided.
 */
public class FontData extends SWTObject {
  /**
   * The name of the font
   */
  private String name;

  /**
   * the font height in points
   */
  private int height;

  /**
   * a bit or combination of {@link SWT#NORMAL}, {@link SWT#BOLD},
   * {@link SWT#ITALIC}
   */
  private int style;

  /**
   * Constructs a new uninitialized font data.
   */
  public FontData() {
    createObject();
  }

  /**
   * Constructs a new FontData given a string representation in the form
   * generated by the {@link #toString()} method.
   * <p>
   * Note that the representation varies between platforms, and a
   * {@link FontData} can only be created from a string that was generated on
   * the same platform.
   *
   * @param string the string representation of a FontData
   *        (must not be <code>null</code>)
   * @throws SWTException
   *  <ul>
   *    <li>{@link SWT#ERROR_NULL_ARGUMENT} -
   *      if the argument is null
   *    </li>
   *    <li>{@link SWT#ERROR_INVALID_ARGUMENT} -
   *      if the argument does not represent a valid description
   *    </li>
   *  </ul>
   */
  public FontData(String string) throws SWTException {
    if (string == null) {
      throw new SWTException(SWT.ERROR_NULL_ARGUMENT);
    }

    // Anyway, throw a ERROR_INVALID_ARGUMENT-exception!
    // We cannot guarantee a platform-independent representation
    throw new SWTException(SWT.ERROR_INVALID_ARGUMENT);
  }

  /**
   * Constructs a new font data given a font name, the height of the desired
   * font in points, and a font style.
   *
   * @param name the name of the font (must not be null)
   * @param height the font height in points
   * @param style a bit or combination of {@link SWT#NORMAL}, {@link SWT#BOLD},
   *              {@link SWT#ITALIC}
   * @throws SWTException
   *  <ul>
   *    <li>{@link SWT#ERROR_NULL_ARGUMENT} -
   *      when the font name is null
   *    </li>
   *    <li>{@link SWT#ERROR_INVALID_ARGUMENT} -
   *      if the height is negative
   *    </li>
   *  </ul>
   */
  public FontData(String name, int height, int style) throws SWTException {
    if (name == null) {
      throw new SWTException(SWT.ERROR_NULL_ARGUMENT);
    }

    if (height < 0) {
      throw new SWTException(SWT.ERROR_INVALID_ARGUMENT);
    }

    createObject(name, height, style);

    this.name = name;
    this.height = height;
    this.style = style;
  }

  /**
   * Returns the height of the receiver in points.
   *
   * @return the height of this FontData
   */
  public int getHeight() {
    return (this.height);
  }

  /**
   * Returns the name of the receiver. On platforms that support font
   * foundries, the return value will be the foundry followed by a dash ("-")
   * followed by the face name.
   *
   * @return the name of this {@link FontData}
   */
  public String getName() {
    return this.name;
  }

  /**
   * Returns the style of the receiver which is a bitwise OR of one or more of
   * the SWT constants {@link SWT#NORMAL}, {@link SWT#BOLD} and
   * {@link SWT#ITALIC}.
   *
   * @return the style of this {@link FontData}
   */
  public int getStyle() {
    return (this.style);
  }

  /**
   * Sets the height of the receiver. The parameter is specified in terms of
   * points, where a point is one seventy-second of an inch.
   *
   * @param height the height of the FontData
   * @throws SWTException
   *  <ul>
   *    <li>{@link SWT#ERROR_INVALID_ARGUMENT} -
   *      if the height is negative
   *    </li>
   *  </ul>
   */
  public void setHeight(int height) throws SWTException {
    if (height < 0) {
      throw new SWTException(SWT.ERROR_INVALID_ARGUMENT);
    }

    this.height = height;
    callMethod("setHeight", height);
  }

  /**
   * Sets the name of the receiver.
   * <p>
   * Some platforms support font foundries. On these platforms, the name of the
   * font specified in setName() may have one of the following forms:
   *
   * <ol>
   *  <li>a face name (for example, "courier")</li>
   *  <li>
   *    a foundry followed by a dash ("-") followed by a face name (for
   *    example, "adobe-courier")
   *  </li>
   * </ol>
   *
   * In either case, the name returned from getName() will include the foundry.
   * <p>
   * On platforms that do not support font foundries, only the face name (for
   * example, "courier") is used in {@link #setName(String)} and
   * {@link #getName()}.
   *
   * @param name the name of the font data (must not be null)
   * @throws
   *  <ul>
   *    <li>{@link SWT#ERROR_NULL_ARGUMENT} -
   *      when the font name is null
   *    </li>
   *  </ul>
   */
  public void setName(String name) throws SWTException {
    if (name == null) {
      throw new SWTException(SWT.ERROR_NULL_ARGUMENT);
    }

    this.name = name;
    callMethod("setName", name);
  }

  /**
   * Sets the style of the receiver to the argument which must be a bitwise OR
   * of one or more of the SWT constants {@link SWT#NORMAL}, {@link SWT#BOLD}
   * and {@link SWT#ITALIC}. All other style bits are ignored.
   *
   * @param style the new style for this {@link FontData}
   */
  public void setStyle(int style) {
    final int mask = SWT.NORMAL | SWT.BOLD | SWT.ITALIC;
    this.style = style & mask;

    callMethod("setStyle", style);
  }
}
